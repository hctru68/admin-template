{"version":3,"sources":["i18n/translationKeys.js","containers/views/Test/Test.js"],"names":["translationKeys","unableLoginTitle","gridTitle","override","css","_templateObject","Test","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","callApiListItems","fetch","proxyUrl","then","res","json","result","setState","isLoaded","items","error","state","t","_this$state","react_default","a","createElement","className","message","propsOfTable","data","columns","keys","map","key","id","Header","accessor","defaultPageSize","filterable","reactstrap_es","xs","lg","es","react_spinners","sizeUnit","size","color","loading","Component","translate"],"mappings":"iOAAeA,EASF,CACLC,iBAAkB,2BAClBC,UAAW,gKCGnB,IAAMC,EAAWC,YAAHC,KAKRC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,iBAAmB,WAGjBC,MAAMC,yFACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAAAG,GACEb,EAAKc,SAAS,CACZC,UAAU,EACVC,MAAOH,KAGX,SAAAI,GACEjB,EAAKc,SAAS,CACZC,UAAU,EACVE,aArBRjB,EAAKkB,MAAQ,CACXD,MAAO,KACPF,UAAU,EACVC,MAAO,IALQhB,mFA6BjBG,KAAKI,oDAEE,IACCY,EAAMhB,KAAKJ,MAAXoB,EADDC,EAE4BjB,KAAKe,MAAhCD,EAFDG,EAECH,MAAOF,EAFRK,EAEQL,SAAUC,EAFlBI,EAEkBJ,MAEzB,GAAIC,EACF,OAAOI,EAAAC,EAAAC,cAAA,OAAKC,UAFQ,mBAEb,UAAuCP,EAAMQ,SAC/C,GAAKV,EAIL,CACL,IAIMW,EAAe,CACnBC,KALWX,EAKCY,QAJE3B,OAAO4B,KAAKb,EAAM,IAAIc,IAAI,SAACC,EAAKC,GAC9C,MAAO,CAAEC,OAAQF,EAAKG,SAAUH,KAIhCI,gBAAiB,EAAGC,YAAY,GAElC,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAjBa,mBAkBhBH,EAAAC,EAAAC,cAACc,EAAA,GAAD,KACEhB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,MACdlB,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BADf,IAC8CL,EAAEY,EAAYrC,YAE5D2B,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACiB,EAAA,EAAed,QArB5B,OAAOL,EAAAC,EAAAC,cAACkB,EAAA,WAAD,CAAYjB,UAAW7B,EAAU+C,SAAU,KAChDC,KAAM,IAAKC,MAAO,UAAWC,SAAU9B,WAxC5B+B,aAuEJC,wBAAYjD","file":"static/js/34.65917611.chunk.js","sourcesContent":["export default {\r\n    translations: {\r\n        languageName: 'translations:languageName',\r\n        selectLanguage: 'translations:selectLanguage',\r\n    },\r\n    button: {\r\n        btnOk: 'button:btnOk',\r\n        btnCancel: 'button:btnCancel',\r\n    },\r\n    message: {\r\n        unableLoginTitle: 'message:unableLoginTitle',\r\n        gridTitle: 'message:gridTitle',\r\n    }\r\n};","/* eslint-disable no-unused-vars */\r\nimport React, { Component } from \"react\";\r\nimport uid from \"uuid\";\r\nimport { css } from 'react-emotion';\r\nimport { RingLoader } from 'react-spinners';\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport {\r\n  Card, CardBody, CardHeader, Col, Row,\r\n  Badge, Pagination, PaginationItem, PaginationLink, Table\r\n} from \"reactstrap\";\r\nimport { translate } from 'react-i18next';\r\nimport key from '../../../i18n/translationKeys';\r\n\r\nconst override = css`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border-color: green;\r\n`;\r\nclass Test extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n  }\r\n  callApiListItems = () => {\r\n    let proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n    let targetUrl = \"http://limitless-dawn-42115.herokuapp.com/initial\";\r\n    fetch(proxyUrl + targetUrl)\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result\r\n          });\r\n        },\r\n        error => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      );\r\n  };\r\n  componentDidMount() {\r\n    this.callApiListItems();\r\n  }\r\n  render() {\r\n    const { t } = this.props;\r\n    const { error, isLoaded, items } = this.state;\r\n    const classAnimated = 'animated fadeIn';\r\n    if (error) {\r\n      return <div className={classAnimated}>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <RingLoader className={override} sizeUnit={\"px\"}\r\n        size={100} color={'#86E7D4'} loading={!isLoaded}\r\n      />\r\n    } else {\r\n      const data = items;\r\n      const columns = Object.keys(items[0]).map((key, id) => {\r\n        return { Header: key, accessor: key };\r\n      });\r\n      const propsOfTable = {\r\n        data: data, columns: columns,\r\n        defaultPageSize: 5, filterable: true,\r\n      }\r\n      return (\r\n        <div className={classAnimated}>\r\n          <Row>\r\n            <Col xs=\"12\" lg=\"12\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <i className=\"fa fa-users text-primary\" /> {t(key.message.gridTitle)}\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <ReactTable {...propsOfTable} />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default translate()(Test);\r\n"],"sourceRoot":""}